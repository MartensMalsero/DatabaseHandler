<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DatabaseHandler</name>
    </assembly>
    <members>
        <member name="T:DatabaseHandler.DatabaseBuilder">
            <summary>
                Creating databases and database tables
            </summary>
        </member>
        <member name="T:DatabaseHandler.DatabaseBuilder.Functions">
            <summary>
                Functions to call
            </summary>
        </member>
        <member name="F:DatabaseHandler.DatabaseBuilder.Functions.CreateDatabase">
            <summary>
                Call the function to create the database
            </summary>
        </member>
        <member name="F:DatabaseHandler.DatabaseBuilder.Functions.CreateTable">
            <summary>
                Call the function to create database tables
            </summary>
        </member>
        <member name="M:DatabaseHandler.DatabaseBuilder.#ctor(System.Boolean,DatabaseHandler.DatabaseBuilder.Functions,System.String,System.String)">
            <summary>
                DatabaseBuilder constructor - call to execute DatabaseBuilder.Functions with the necessary SQL
            </summary>
            <param name="debug"></param>
            <param name="functions"></param>
            <param name="name">Database oder table name</param>
            <param name="sql"></param>
        </member>
        <member name="T:DatabaseHandler.DatabaseController">
            <summary>
                Controller for using the database
            </summary>
        </member>
        <member name="M:DatabaseHandler.DatabaseController.CreateInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseHandler.DatabaseController.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                <example>
                    <para>You can set debug to true or false to get console messages or not</para>
                    <para>Initialize as follows</para>
                    <code>
                        _ = new DatabaseController(<paramref name="host"/>, <paramref name="port"/>, <paramref name="db"/>, <paramref name="username"/>, <paramref name="password"/>, <paramref name="debug"/>)
                    </code>
                </example>
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="db"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="debug"></param>
        </member>
        <member name="M:DatabaseHandler.DatabaseController.SelectSql(System.String,System.Object[],System.Boolean,System.Object[],System.Object[],System.Int32)">
             <summary>
                 <example>
                     <para>Select the <paramref name="columns"/> in the given <paramref name="tableName"/></para>
                     <para>If you want to select everything in <paramref name="tableName"/>, e.g. in table "users"</para>
                     <code>
                         DatabaseController.SelectSQL("users", new object[] {"*"})
                     </code>
                 </example>
             </summary>
             
             <param name="tableName"></param>
             <param name="columns"></param>
             <param name="optionalWhere"></param>
             <param name="optionalWhereColumns"></param>
             <param name="optionalWhereValues"></param>
             <param name="optionalLimit"></param>
            
             <returns>
                 <para>DataTable with all <paramref name="columns"/> and values</para>
                 <example>
                     You have to catch the result as a DataTable, for example
                     <code>
                         using DataTable dt = DatabaseController.SelectSQL("users", new object[] {"*"});
                         if (dt.Rows.Count > 0)
                         {
                             foreach (DataRow dr in dt.Rows)
                             {
                                 Console.WriteLine(dr["ID"]);
                             }
                         }
                     </code>
                 </example>
             </returns>
        </member>
        <member name="M:DatabaseHandler.DatabaseController.UpsertSql(System.String,System.Object[],System.Object[],System.Int32,System.String)">
            <summary>
                To update the <paramref name="columns"/> with <paramref name="values"/> in <paramref name="tableName"/>
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <param name="values"></param>
            <param name="id"></param>
            <param name="idColumnName"></param>
            <returns>
                <example>
                    <code>
                        bool upsert = DatabaseController.UpsertSQL(...)
                        
                        if (upsert) {
                            ...
                        }
                    </code>
                </example>
            </returns>
        </member>
        <member name="M:DatabaseHandler.DatabaseController.DeleteSql(System.String,System.Object[],System.Object[])">
            <summary>
                To delete entries or lines
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <param name="values"></param>
            <returns>
                <example>
                    <code>
                        bool delete = DatabaseController.DeleteSQL(...)
                        
                        if (delete) {
                            ...
                        }
                    </code>
                </example>
            </returns>
        </member>
        <member name="M:DatabaseHandler.DatabaseController.CountSql(System.String,System.Boolean,System.Object[],System.Object[])">
            <summary>
                Counting the specified entries in the <paramref name="tableName"/>
            </summary>
            <param name="tableName"></param>
            <param name="optionalWhere"></param>
            <param name="optionalWhereColumns"></param>
            <param name="optionalWhereValues"></param>
            <returns>
                <example>
                    <code>
                        Int64 count = DatabaseController.CountSQL(...)
                    </code>
                </example>
            </returns>
        </member>
        <member name="M:DatabaseHandler.DatabaseController.MAX_ID_SQL(System.String,System.String,System.Boolean,System.Object[],System.Object[])">
            <summary>
                Get last entry in <paramref name="tableName"/> + 1
            </summary>
            <param name="tableName"></param>
            <param name="rowName"></param>
            <param name="optionalWhere"></param>
            <param name="optionalWhereColumns"></param>
            <param name="optionalWhereValues"></param>
            <returns>
                <example>
                    <code>
                        Int64 MaxID = DatabaseController.Max_ID_SQL(...)
                    </code>
                </example>
            </returns>
        </member>
    </members>
</doc>
